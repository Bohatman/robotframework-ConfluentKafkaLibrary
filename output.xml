<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.2 (Python 3.8.10 on linux)" generated="20211108 10:38:05.097" rpa="false" schemaversion="2">
<suite id="s1" name="Examples" source="/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples">
<suite id="s1-s1" name="Test" source="/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples/test.robot">
<kw name="Starting Test" type="SETUP">
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_TOPIC}</arg>
<arg>test</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:05.576" level="INFO">${TEST_TOPIC} = test</msg>
<status status="PASS" starttime="20211108 10:38:05.575" endtime="20211108 10:38:05.576"/>
</kw>
<kw name="Start Consumer Threaded" library="ConfluentKafkaLibrary">
<var>${thread}</var>
<arg>topics=${TEST_TOPIC}</arg>
<doc>Run consumer in daemon thread and store data from topics. To read and work with this
   collected data use keyword `Get Messages From Thread`.
   Could be used at the Test setup or in each test.
   This is useful when you are reading always the same topics and you don't want to create
   consumer in each test to poll data. You can create as many consumers in the Test setup
   as you want and then in test just read data with `Get Messages From Thread` keyword.
- ``topics`` (list): List of topics for subscription.
- ``group_id`` (str or uuid.uuid4() if not set) : name of the consumer group to join for
    dynamic partition assignment (if enabled), and to use for fetching and
    committing offsets. If None, unique string is generated  (via uuid.uuid4())
    and offset commits are disabled. Default: `None`.</doc>
<msg timestamp="20211108 10:38:15.591" level="INFO">${thread} = &lt;GetMessagesThread(Thread-1, started daemon 140690914801408)&gt;</msg>
<status status="PASS" starttime="20211108 10:38:05.576" endtime="20211108 10:38:15.591"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${MAIN_THREAD}</arg>
<arg>${thread}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:15.593" level="INFO">${MAIN_THREAD} = &lt;GetMessagesThread(Thread-1, started daemon 140690914801408)&gt;</msg>
<status status="PASS" starttime="20211108 10:38:15.591" endtime="20211108 10:38:15.593"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_group_id}</var>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:38:15.594" level="INFO">${producer_group_id} = fbc8c86e-72de-4e0d-8d57-37e04b918c1f</msg>
<status status="PASS" starttime="20211108 10:38:15.593" endtime="20211108 10:38:15.594"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${PRODUCER_ID}</arg>
<arg>${producer_group_id}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:15.598" level="INFO">${PRODUCER_ID} = fbc8c86e-72de-4e0d-8d57-37e04b918c1f</msg>
<status status="PASS" starttime="20211108 10:38:15.594" endtime="20211108 10:38:15.598"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${P_ID}</arg>
<arg>${0}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:15.599" level="INFO">${P_ID} = 0</msg>
<status status="PASS" starttime="20211108 10:38:15.598" endtime="20211108 10:38:15.599"/>
</kw>
<kw name="Prepare Data">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.600" endtime="20211108 10:38:15.600"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.600" endtime="20211108 10:38:15.601"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.601" endtime="20211108 10:38:15.601"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.601" endtime="20211108 10:38:15.602"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.602" endtime="20211108 10:38:15.602"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:15.602" endtime="20211108 10:38:15.603"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:15.704" level="INFO">${count} = 6</msg>
<status status="PASS" starttime="20211108 10:38:15.603" endtime="20211108 10:38:15.704"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:15.705" level="INFO">Reaming messages to be delivered: 6</msg>
<status status="PASS" starttime="20211108 10:38:15.704" endtime="20211108 10:38:15.705"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:15.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:15.706" level="FAIL">6 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:15.705" endtime="20211108 10:38:15.706"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:15.603" endtime="20211108 10:38:15.707"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:16.309" level="INFO">${count} = 6</msg>
<status status="PASS" starttime="20211108 10:38:16.208" endtime="20211108 10:38:16.309"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:16.310" level="INFO">Reaming messages to be delivered: 6</msg>
<status status="PASS" starttime="20211108 10:38:16.310" endtime="20211108 10:38:16.310"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:16.310" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:16.311" level="FAIL">6 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:16.310" endtime="20211108 10:38:16.311"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:16.207" endtime="20211108 10:38:16.311"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:16.914" level="INFO">${count} = 6</msg>
<status status="PASS" starttime="20211108 10:38:16.813" endtime="20211108 10:38:16.914"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:16.914" level="INFO">Reaming messages to be delivered: 6</msg>
<status status="PASS" starttime="20211108 10:38:16.914" endtime="20211108 10:38:16.914"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:16.914" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:16.915" level="FAIL">6 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:16.914" endtime="20211108 10:38:16.915"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:16.812" endtime="20211108 10:38:16.916"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:17.518" level="INFO">${count} = 6</msg>
<status status="PASS" starttime="20211108 10:38:17.417" endtime="20211108 10:38:17.518"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:17.519" level="INFO">Reaming messages to be delivered: 6</msg>
<status status="PASS" starttime="20211108 10:38:17.518" endtime="20211108 10:38:17.519"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:17.519" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:17.520" level="FAIL">6 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:17.519" endtime="20211108 10:38:17.520"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:17.416" endtime="20211108 10:38:17.520"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:18.022" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:18.021" endtime="20211108 10:38:18.022"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:18.022" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:18.022" endtime="20211108 10:38:18.022"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:18.023" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:18.022" endtime="20211108 10:38:18.023"/>
</kw>
<status status="PASS" starttime="20211108 10:38:18.021" endtime="20211108 10:38:18.023"/>
</kw>
<status status="PASS" starttime="20211108 10:38:15.603" endtime="20211108 10:38:18.023"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:19.023" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:18.023" endtime="20211108 10:38:19.024"/>
</kw>
<status status="PASS" starttime="20211108 10:38:15.599" endtime="20211108 10:38:19.024"/>
</kw>
<kw name="List Topics" library="ConfluentKafkaLibrary">
<var>${topics}</var>
<arg>${producer_group_id}</arg>
<doc>Request Metadata from cluster. Could be executed with consumer or producer group_id too.
- ``topic`` (str):  If specified, only request info about this topic, else return for all topics in cluster.
Default: `None`.
- ``group_id`` (str): *required* id of the created consumer or producer.</doc>
<msg timestamp="20211108 10:38:19.030" level="INFO">${topics} = {'__confluent.support.metrics': TopicMetadata(__confluent.support.metrics, 1 partitions), '_schemas': TopicMetadata(_schemas, 1 partitions), 'test': TopicMetadata(test, 1 partitions), '__consumer_offs...</msg>
<status status="PASS" starttime="20211108 10:38:19.025" endtime="20211108 10:38:19.030"/>
</kw>
<kw name="Get Topic Partitions" library="ConfluentKafkaLibrary">
<var>${partitions}</var>
<arg>${topics['${TEST_TOPIC}']}</arg>
<doc>Returns dictionary of all TopicPartitons in topic (topic.partitions).</doc>
<msg timestamp="20211108 10:38:19.031" level="INFO">${partitions} = {0: PartitionMetadata(0)}</msg>
<status status="PASS" starttime="20211108 10:38:19.030" endtime="20211108 10:38:19.031"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${partition_id}</var>
<arg>${partitions[0].id}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:19.032" level="INFO">${partition_id} = 0</msg>
<status status="PASS" starttime="20211108 10:38:19.031" endtime="20211108 10:38:19.032"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${P_ID}</arg>
<arg>${partition_id}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:19.032" level="INFO">${P_ID} = 0</msg>
<status status="PASS" starttime="20211108 10:38:19.032" endtime="20211108 10:38:19.032"/>
</kw>
<kw name="Create Topic Partition" library="ConfluentKafkaLibrary">
<var>${tp}</var>
<arg>${TEST_TOPIC}</arg>
<arg>${partition_id}</arg>
<arg>${OFFSET_BEGINNING}</arg>
<doc>Returns TopicPartiton object based on
https://docs.confluent.io/current/clients/confluent-kafka-python/#topicpartition</doc>
<msg timestamp="20211108 10:38:19.033" level="INFO">${tp} = TopicPartition{topic=test,partition=0,offset=-2,error=None}</msg>
<status status="PASS" starttime="20211108 10:38:19.032" endtime="20211108 10:38:19.033"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${data}</var>
<arg>Hello</arg>
<arg>World</arg>
<arg>{'test': 1}</arg>
<arg>{'test': 2}</arg>
<arg>{'test': 3}</arg>
<arg>{'test': 4}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:19.033" level="INFO">${data} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:19.033" endtime="20211108 10:38:19.033"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${data}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:19.034" level="INFO">${TEST_DATA} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:19.033" endtime="20211108 10:38:19.034"/>
</kw>
<kw name="Prepare Data">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.035" endtime="20211108 10:38:19.035"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.035" endtime="20211108 10:38:19.036"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.036" endtime="20211108 10:38:19.036"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.036" endtime="20211108 10:38:19.037"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.037" endtime="20211108 10:38:19.037"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:19.037" endtime="20211108 10:38:19.038"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:19.050" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:19.039" endtime="20211108 10:38:19.050"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:19.050" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:19.050" endtime="20211108 10:38:19.050"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:19.051" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:19.051" endtime="20211108 10:38:19.051"/>
</kw>
<status status="PASS" starttime="20211108 10:38:19.038" endtime="20211108 10:38:19.051"/>
</kw>
<status status="PASS" starttime="20211108 10:38:19.038" endtime="20211108 10:38:19.051"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:20.051" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:19.051" endtime="20211108 10:38:20.052"/>
</kw>
<status status="PASS" starttime="20211108 10:38:19.034" endtime="20211108 10:38:20.052"/>
</kw>
<status status="PASS" starttime="20211108 10:38:05.575" endtime="20211108 10:38:20.052"/>
</kw>
<test id="s1-s1-t1" name="Verify Topics">
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:20.054" level="INFO">${group_id} = a5562e4f-0210-4d16-a160-f8a288e4b2b0</msg>
<status status="PASS" starttime="20211108 10:38:20.053" endtime="20211108 10:38:20.054"/>
</kw>
<kw name="List Topics" library="ConfluentKafkaLibrary">
<var>${topics}</var>
<arg>${group_id}</arg>
<doc>Request Metadata from cluster. Could be executed with consumer or producer group_id too.
- ``topic`` (str):  If specified, only request info about this topic, else return for all topics in cluster.
Default: `None`.
- ``group_id`` (str): *required* id of the created consumer or producer.</doc>
<msg timestamp="20211108 10:38:20.062" level="INFO">${topics} = {'__confluent.support.metrics': TopicMetadata(__confluent.support.metrics, 1 partitions), '_schemas': TopicMetadata(_schemas, 1 partitions), 'test': TopicMetadata(test, 1 partitions), '__consumer_offs...</msg>
<status status="PASS" starttime="20211108 10:38:20.054" endtime="20211108 10:38:20.062"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${topics}</arg>
<arg>${TEST_TOPIC}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20211108 10:38:20.062" endtime="20211108 10:38:20.063"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary" type="TEARDOWN">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:20.063" endtime="20211108 10:38:20.064"/>
</kw>
<status status="PASS" starttime="20211108 10:38:20.052" endtime="20211108 10:38:20.064"/>
</test>
<test id="s1-s1-t2" name="Basic Consumer">
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:20.065" level="INFO">${group_id} = e2f440e7-9b81-4bc5-b5a5-c2d7298f3cf1</msg>
<status status="PASS" starttime="20211108 10:38:20.064" endtime="20211108 10:38:20.065"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${group_id}</arg>
<arg>topics=${TEST_TOPIC}</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:38:20.065" endtime="20211108 10:38:20.066"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=3</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:20.185" level="INFO">${messages} = ['Hello', 'World', "{'test': 1}"]</msg>
<status status="PASS" starttime="20211108 10:38:20.066" endtime="20211108 10:38:20.186"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${data}</var>
<arg>Hello</arg>
<arg>World</arg>
<arg>{'test': 1}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:20.186" level="INFO">${data} = ['Hello', 'World', "{'test': 1}"]</msg>
<status status="PASS" starttime="20211108 10:38:20.186" endtime="20211108 10:38:20.186"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${messages}</arg>
<arg>${data}</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:20.186" endtime="20211108 10:38:20.186"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:38:20.187" endtime="20211108 10:38:20.187"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:20.187" endtime="20211108 10:38:20.208"/>
</kw>
<status status="PASS" starttime="20211108 10:38:20.187" endtime="20211108 10:38:20.208"/>
</kw>
<status status="PASS" starttime="20211108 10:38:20.064" endtime="20211108 10:38:20.208"/>
</test>
<test id="s1-s1-t3" name="Produce Without Value">
<kw name="Set Variable" library="BuiltIn">
<var>${topic_name}</var>
<arg>topicwithoutvaluee</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:20.209" level="INFO">${topic_name} = topicwithoutvaluee</msg>
<status status="PASS" starttime="20211108 10:38:20.209" endtime="20211108 10:38:20.209"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${topic_name}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:20.209" endtime="20211108 10:38:20.209"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:20.311" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:20.210" endtime="20211108 10:38:20.311"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:20.311" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:20.311" endtime="20211108 10:38:20.311"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:20.311" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:20.312" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:20.311" endtime="20211108 10:38:20.312"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:20.210" endtime="20211108 10:38:20.312"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:20.915" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:20.814" endtime="20211108 10:38:20.915"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:20.916" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:20.915" endtime="20211108 10:38:20.916"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:20.916" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:20.916" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:20.916" endtime="20211108 10:38:20.916"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:20.813" endtime="20211108 10:38:20.917"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:21.519" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:21.418" endtime="20211108 10:38:21.519"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:21.520" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:21.520" endtime="20211108 10:38:21.520"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:21.520" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:21.521" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:21.520" endtime="20211108 10:38:21.521"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:21.417" endtime="20211108 10:38:21.521"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:22.023" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:22.022" endtime="20211108 10:38:22.023"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:22.023" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:22.023" endtime="20211108 10:38:22.023"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:22.023" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:22.023" endtime="20211108 10:38:22.024"/>
</kw>
<status status="PASS" starttime="20211108 10:38:22.022" endtime="20211108 10:38:22.024"/>
</kw>
<status status="PASS" starttime="20211108 10:38:20.210" endtime="20211108 10:38:22.024"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:22.025" level="INFO">${group_id} = 2a77f38a-5aea-4345-845c-ae6bc359ee49</msg>
<status status="PASS" starttime="20211108 10:38:22.024" endtime="20211108 10:38:22.025"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${group_id}</arg>
<arg>topics=${topic_name}</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:38:22.025" endtime="20211108 10:38:22.026"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=1</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:22.144" level="INFO">${messages} = [None]</msg>
<status status="PASS" starttime="20211108 10:38:22.026" endtime="20211108 10:38:22.145"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${messages}</arg>
<arg>[None]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20211108 10:38:22.145" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:22.145" endtime="20211108 10:38:22.145"/>
</kw>
<status status="PASS" starttime="20211108 10:38:20.208" endtime="20211108 10:38:22.145"/>
</test>
<test id="s1-s1-t4" name="Verify Position">
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:22.148" level="INFO">${group_id} = ce9b8341-2a29-48d7-8118-dfe39cb1667b</msg>
<status status="PASS" starttime="20211108 10:38:22.147" endtime="20211108 10:38:22.148"/>
</kw>
<kw name="Create Topic Partition" library="ConfluentKafkaLibrary">
<var>${tp}</var>
<arg>${TEST_TOPIC}</arg>
<arg>${P_ID}</arg>
<arg>${OFFSET_END}</arg>
<doc>Returns TopicPartiton object based on
https://docs.confluent.io/current/clients/confluent-kafka-python/#topicpartition</doc>
<msg timestamp="20211108 10:38:22.149" level="INFO">${tp} = TopicPartition{topic=test,partition=0,offset=-1,error=None}</msg>
<status status="PASS" starttime="20211108 10:38:22.148" endtime="20211108 10:38:22.149"/>
</kw>
<kw name="Assign To Topic Partition" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<arg>${tp}</arg>
<doc>Assign a list of TopicPartitions.</doc>
<status status="PASS" starttime="20211108 10:38:22.149" endtime="20211108 10:38:22.149"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:27.153" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20211108 10:38:22.150" endtime="20211108 10:38:27.153"/>
</kw>
<kw name="Get Position" library="ConfluentKafkaLibrary">
<var>${position}</var>
<arg>group_id=${group_id}</arg>
<arg>topic_partitions=${tp}</arg>
<doc>Retrieve current positions (offsets) for the list of partitions.</doc>
<msg timestamp="20211108 10:38:27.154" level="INFO">${position} = [TopicPartition{topic=test,partition=0,offset=-1001,error=None}]</msg>
<status status="PASS" starttime="20211108 10:38:27.154" endtime="20211108 10:38:27.154"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${position_before}</var>
<arg>${position[0].offset}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:27.155" level="INFO">${position_before} = -1001</msg>
<status status="PASS" starttime="20211108 10:38:27.154" endtime="20211108 10:38:27.155"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Dummy</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.155" endtime="20211108 10:38:27.156"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:27.164" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:27.157" endtime="20211108 10:38:27.164"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:27.164" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:27.164" endtime="20211108 10:38:27.164"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:27.165" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:27.164" endtime="20211108 10:38:27.165"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.156" endtime="20211108 10:38:27.165"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.156" endtime="20211108 10:38:27.165"/>
</kw>
<kw name="Get Position" library="ConfluentKafkaLibrary">
<var>${position}</var>
<arg>group_id=${group_id}</arg>
<arg>topic_partitions=${tp}</arg>
<doc>Retrieve current positions (offsets) for the list of partitions.</doc>
<msg timestamp="20211108 10:38:27.165" level="INFO">${position} = [TopicPartition{topic=test,partition=0,offset=-1001,error=None}]</msg>
<status status="PASS" starttime="20211108 10:38:27.165" endtime="20211108 10:38:27.165"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${position_after_produce}</var>
<arg>${position[0].offset}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:27.166" level="INFO">${position_after_produce} = -1001</msg>
<status status="PASS" starttime="20211108 10:38:27.165" endtime="20211108 10:38:27.166"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${position_before}</arg>
<arg>${position_after_produce}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20211108 10:38:27.166" endtime="20211108 10:38:27.166"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=1</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:27.167" level="INFO">${messages} = ['Dummy']</msg>
<status status="PASS" starttime="20211108 10:38:27.167" endtime="20211108 10:38:27.167"/>
</kw>
<kw name="Get Position" library="ConfluentKafkaLibrary">
<var>${position}</var>
<arg>group_id=${group_id}</arg>
<arg>topic_partitions=${tp}</arg>
<doc>Retrieve current positions (offsets) for the list of partitions.</doc>
<msg timestamp="20211108 10:38:27.167" level="INFO">${position} = [TopicPartition{topic=test,partition=0,offset=13,error=None}]</msg>
<status status="PASS" starttime="20211108 10:38:27.167" endtime="20211108 10:38:27.167"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${position_after_poll_1}</var>
<arg>${position[0].offset}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:27.168" level="INFO">${position_after_poll_1} = 13</msg>
<status status="PASS" starttime="20211108 10:38:27.168" endtime="20211108 10:38:27.168"/>
</kw>
<kw name="Should Not Be Equal As Integers" library="BuiltIn">
<arg>${position_after_poll_1}</arg>
<arg>${position_after_produce}</arg>
<doc>Fails if objects are equal after converting them to integers.</doc>
<status status="PASS" starttime="20211108 10:38:27.168" endtime="20211108 10:38:27.169"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Dummy</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.169" endtime="20211108 10:38:27.169"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:27.179" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:27.170" endtime="20211108 10:38:27.179"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:27.179" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:27.179" endtime="20211108 10:38:27.179"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:27.180" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:27.179" endtime="20211108 10:38:27.180"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.170" endtime="20211108 10:38:27.180"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.169" endtime="20211108 10:38:27.180"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=1</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:27.180" level="INFO">${messages} = ['Dummy']</msg>
<status status="PASS" starttime="20211108 10:38:27.180" endtime="20211108 10:38:27.180"/>
</kw>
<kw name="Get Position" library="ConfluentKafkaLibrary">
<var>${position}</var>
<arg>group_id=${group_id}</arg>
<arg>topic_partitions=${tp}</arg>
<doc>Retrieve current positions (offsets) for the list of partitions.</doc>
<msg timestamp="20211108 10:38:27.181" level="INFO">${position} = [TopicPartition{topic=test,partition=0,offset=14,error=None}]</msg>
<status status="PASS" starttime="20211108 10:38:27.180" endtime="20211108 10:38:27.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${position_after_poll_2}</var>
<arg>${position[0].offset}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:27.182" level="INFO">${position_after_poll_2} = 14</msg>
<status status="PASS" starttime="20211108 10:38:27.181" endtime="20211108 10:38:27.182"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${position_after_poll_1 + 1}</arg>
<arg>${position_after_poll_2}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20211108 10:38:27.182" endtime="20211108 10:38:27.182"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:38:27.183" endtime="20211108 10:38:27.183"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:27.183" endtime="20211108 10:38:27.189"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.183" endtime="20211108 10:38:27.189"/>
</kw>
<status status="PASS" starttime="20211108 10:38:22.147" endtime="20211108 10:38:27.189"/>
</test>
<test id="s1-s1-t5" name="Consumer With Assignment To Last Message After Get Of Watermark Offsets">
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:27.191" level="INFO">${group_id} = a4cbddb0-6e84-42a3-8e6b-02fb101f9f58</msg>
<status status="PASS" starttime="20211108 10:38:27.190" endtime="20211108 10:38:27.191"/>
</kw>
<kw name="Create Topic Partition" library="ConfluentKafkaLibrary">
<var>${tp}</var>
<arg>${TEST_TOPIC}</arg>
<arg>${P_ID}</arg>
<doc>Returns TopicPartiton object based on
https://docs.confluent.io/current/clients/confluent-kafka-python/#topicpartition</doc>
<msg timestamp="20211108 10:38:27.191" level="INFO">${tp} = TopicPartition{topic=test,partition=0,offset=-1001,error=None}</msg>
<status status="PASS" starttime="20211108 10:38:27.191" endtime="20211108 10:38:27.191"/>
</kw>
<kw name="Get Watermark Offsets" library="ConfluentKafkaLibrary">
<var>${offset}</var>
<arg>${group_id}</arg>
<arg>${tp}</arg>
<doc>Retrieve low and high offsets for partition.</doc>
<msg timestamp="20211108 10:38:27.200" level="INFO">${offset} = (0, 14)</msg>
<status status="PASS" starttime="20211108 10:38:27.191" endtime="20211108 10:38:27.200"/>
</kw>
<kw name="Create Topic Partition" library="ConfluentKafkaLibrary">
<var>${tp}</var>
<arg>${TEST_TOPIC}</arg>
<arg>${P_ID}</arg>
<arg>${offset[1]}</arg>
<doc>Returns TopicPartiton object based on
https://docs.confluent.io/current/clients/confluent-kafka-python/#topicpartition</doc>
<msg timestamp="20211108 10:38:27.201" level="INFO">${tp} = TopicPartition{topic=test,partition=0,offset=14,error=None}</msg>
<status status="PASS" starttime="20211108 10:38:27.200" endtime="20211108 10:38:27.201"/>
</kw>
<kw name="Assign To Topic Partition" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<arg>${tp}</arg>
<doc>Assign a list of TopicPartitions.</doc>
<status status="PASS" starttime="20211108 10:38:27.201" endtime="20211108 10:38:27.205"/>
</kw>
<kw name="Prepare Data">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.206" endtime="20211108 10:38:27.206"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.206" endtime="20211108 10:38:27.207"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.207" endtime="20211108 10:38:27.207"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.208" endtime="20211108 10:38:27.208"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.208" endtime="20211108 10:38:27.209"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:27.209" endtime="20211108 10:38:27.209"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:27.213" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:27.210" endtime="20211108 10:38:27.213"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:27.214" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:27.213" endtime="20211108 10:38:27.214"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:27.214" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:27.214" endtime="20211108 10:38:27.214"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.209" endtime="20211108 10:38:27.215"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.209" endtime="20211108 10:38:27.215"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:28.215" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:27.215" endtime="20211108 10:38:28.215"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.205" endtime="20211108 10:38:28.216"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=6</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:28.216" level="INFO">${messages} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:28.216" endtime="20211108 10:38:28.216"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${TEST_DATA}</arg>
<arg>${messages}</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:28.217" endtime="20211108 10:38:28.217"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:38:28.217" endtime="20211108 10:38:28.218"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:28.218" endtime="20211108 10:38:28.222"/>
</kw>
<status status="PASS" starttime="20211108 10:38:28.217" endtime="20211108 10:38:28.222"/>
</kw>
<status status="PASS" starttime="20211108 10:38:27.190" endtime="20211108 10:38:28.222"/>
</test>
<test id="s1-s1-t6" name="Consumer With Assignment To OFFSET_END">
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:28.223" level="INFO">${group_id} = 1ad50b6e-2adc-4100-b81b-22bc21290cb7</msg>
<status status="PASS" starttime="20211108 10:38:28.223" endtime="20211108 10:38:28.223"/>
</kw>
<kw name="Create Topic Partition" library="ConfluentKafkaLibrary">
<var>${tp}</var>
<arg>${TEST_TOPIC}</arg>
<arg>${P_ID}</arg>
<arg>${OFFSET_END}</arg>
<doc>Returns TopicPartiton object based on
https://docs.confluent.io/current/clients/confluent-kafka-python/#topicpartition</doc>
<msg timestamp="20211108 10:38:28.224" level="INFO">${tp} = TopicPartition{topic=test,partition=0,offset=-1,error=None}</msg>
<status status="PASS" starttime="20211108 10:38:28.223" endtime="20211108 10:38:28.224"/>
</kw>
<kw name="Assign To Topic Partition" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<arg>${tp}</arg>
<doc>Assign a list of TopicPartitions.</doc>
<status status="PASS" starttime="20211108 10:38:28.224" endtime="20211108 10:38:28.224"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:33.224" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20211108 10:38:28.224" endtime="20211108 10:38:33.225"/>
</kw>
<kw name="Prepare Data">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.225" endtime="20211108 10:38:33.226"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.226" endtime="20211108 10:38:33.227"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.227" endtime="20211108 10:38:33.228"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.228" endtime="20211108 10:38:33.228"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.228" endtime="20211108 10:38:33.229"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:33.229" endtime="20211108 10:38:33.230"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:33.235" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:33.230" endtime="20211108 10:38:33.235"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:33.235" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:33.235" endtime="20211108 10:38:33.235"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:33.235" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:33.235" endtime="20211108 10:38:33.236"/>
</kw>
<status status="PASS" starttime="20211108 10:38:33.230" endtime="20211108 10:38:33.236"/>
</kw>
<status status="PASS" starttime="20211108 10:38:33.230" endtime="20211108 10:38:33.236"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:34.236" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:33.236" endtime="20211108 10:38:34.236"/>
</kw>
<status status="PASS" starttime="20211108 10:38:33.225" endtime="20211108 10:38:34.237"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>poll_attempts=30</arg>
<arg>max_records=6</arg>
<arg>timeout=5</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:34.238" level="INFO">${messages} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:34.237" endtime="20211108 10:38:34.238"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${TEST_DATA}</arg>
<arg>${messages}</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:34.238" endtime="20211108 10:38:34.238"/>
</kw>
<kw name="Unassign Teardown" type="TEARDOWN">
<arg>${group_id}</arg>
<kw name="Unassign" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<status status="PASS" starttime="20211108 10:38:34.239" endtime="20211108 10:38:34.239"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:34.239" endtime="20211108 10:38:34.243"/>
</kw>
<status status="PASS" starttime="20211108 10:38:34.239" endtime="20211108 10:38:34.243"/>
</kw>
<status status="PASS" starttime="20211108 10:38:28.222" endtime="20211108 10:38:34.243"/>
</test>
<test id="s1-s1-t7" name="Verify Test And Threaded Consumer">
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="SETUP">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:34.244" endtime="20211108 10:38:34.244"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:34.246" level="INFO">${group_id} = d2a002f5-5a19-4704-9ceb-2842ca4ce8aa</msg>
<status status="PASS" starttime="20211108 10:38:34.244" endtime="20211108 10:38:34.246"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${group_id}</arg>
<arg>topics=${TEST_TOPIC}</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:38:34.246" endtime="20211108 10:38:34.246"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:44.249" level="INFO">${messages} = []</msg>
<status status="PASS" starttime="20211108 10:38:34.247" endtime="20211108 10:38:44.249"/>
</kw>
<kw name="Prepare Data">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.250" endtime="20211108 10:38:44.251"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.251" endtime="20211108 10:38:44.251"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.251" endtime="20211108 10:38:44.252"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.252" endtime="20211108 10:38:44.253"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.253" endtime="20211108 10:38:44.253"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:44.253" endtime="20211108 10:38:44.254"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:44.259" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:44.255" endtime="20211108 10:38:44.259"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:44.260" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:44.259" endtime="20211108 10:38:44.260"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:44.260" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:44.260" endtime="20211108 10:38:44.260"/>
</kw>
<status status="PASS" starttime="20211108 10:38:44.254" endtime="20211108 10:38:44.260"/>
</kw>
<status status="PASS" starttime="20211108 10:38:44.254" endtime="20211108 10:38:44.260"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:45.261" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:44.260" endtime="20211108 10:38:45.261"/>
</kw>
<status status="PASS" starttime="20211108 10:38:44.250" endtime="20211108 10:38:45.261"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages}</var>
<arg>${MAIN_THREAD}</arg>
<arg>decode_format=utf-8</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:45.262" level="INFO">${thread_messages} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:45.262" endtime="20211108 10:38:45.262"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${group_id}</arg>
<arg>max_records=6</arg>
<arg>decode_format=utf8</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:38:45.263" level="INFO">${messages} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:45.262" endtime="20211108 10:38:45.263"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${thread_messages}</arg>
<arg>${messages}</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:45.263" endtime="20211108 10:38:45.263"/>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>Basic Teardown</arg>
<arg>${group_id}</arg>
<arg>AND</arg>
<arg>Clear Messages From Thread</arg>
<arg>${MAIN_THREAD}</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Basic Teardown">
<arg>${group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:38:45.264" endtime="20211108 10:38:45.265"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:45.265" endtime="20211108 10:38:45.271"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.264" endtime="20211108 10:38:45.271"/>
</kw>
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:45.271" endtime="20211108 10:38:45.272"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.264" endtime="20211108 10:38:45.272"/>
</kw>
<status status="PASS" starttime="20211108 10:38:34.244" endtime="20211108 10:38:45.272"/>
</test>
<test id="s1-s1-t8" name="Verify Clean Of Threaded Consumer Messages">
<kw name="Prepare Data" type="SETUP">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.273" endtime="20211108 10:38:45.274"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.274" endtime="20211108 10:38:45.274"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.274" endtime="20211108 10:38:45.275"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.275" endtime="20211108 10:38:45.275"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.275" endtime="20211108 10:38:45.276"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:45.276" endtime="20211108 10:38:45.276"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:45.282" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:45.277" endtime="20211108 10:38:45.282"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:45.283" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:45.282" endtime="20211108 10:38:45.283"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:45.283" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:45.283" endtime="20211108 10:38:45.283"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.277" endtime="20211108 10:38:45.283"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.276" endtime="20211108 10:38:45.283"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:46.284" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:45.283" endtime="20211108 10:38:46.284"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.273" endtime="20211108 10:38:46.284"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages1}</var>
<arg>${MAIN_THREAD}</arg>
<arg>decode_format=utf-8</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:46.285" level="INFO">${thread_messages1} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:46.284" endtime="20211108 10:38:46.285"/>
</kw>
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:46.285" endtime="20211108 10:38:46.285"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages2}</var>
<arg>${MAIN_THREAD}</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:46.285" level="INFO">${thread_messages2} = []</msg>
<status status="PASS" starttime="20211108 10:38:46.285" endtime="20211108 10:38:46.285"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${TEST_DATA}</arg>
<arg>${thread_messages1}</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:46.285" endtime="20211108 10:38:46.286"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${thread_messages2}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20211108 10:38:46.286" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20211108 10:38:46.286" endtime="20211108 10:38:46.286"/>
</kw>
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="TEARDOWN">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:46.286" endtime="20211108 10:38:46.286"/>
</kw>
<status status="PASS" starttime="20211108 10:38:45.272" endtime="20211108 10:38:46.286"/>
</test>
<test id="s1-s1-t9" name="Remove And Publish New Messages From Threaded Consumer">
<kw name="Prepare Data" type="SETUP">
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Hello</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.287" endtime="20211108 10:38:46.288"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=World</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.288" endtime="20211108 10:38:46.288"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 1}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.288" endtime="20211108 10:38:46.289"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 2}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.289" endtime="20211108 10:38:46.289"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 3}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.290" endtime="20211108 10:38:46.290"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value={'test': 4}</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:46.290" endtime="20211108 10:38:46.291"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:46.297" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:46.291" endtime="20211108 10:38:46.297"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:46.298" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:46.298" endtime="20211108 10:38:46.298"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:46.298" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:46.298" endtime="20211108 10:38:46.298"/>
</kw>
<status status="PASS" starttime="20211108 10:38:46.291" endtime="20211108 10:38:46.298"/>
</kw>
<status status="PASS" starttime="20211108 10:38:46.291" endtime="20211108 10:38:46.298"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:47.299" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:46.298" endtime="20211108 10:38:47.299"/>
</kw>
<status status="PASS" starttime="20211108 10:38:46.287" endtime="20211108 10:38:47.299"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages1}</var>
<arg>${MAIN_THREAD}</arg>
<arg>decode_format=utf-8</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:47.300" level="INFO">${thread_messages1} = ['Hello', 'World', "{'test': 1}", "{'test': 2}", "{'test': 3}", "{'test': 4}"]</msg>
<status status="PASS" starttime="20211108 10:38:47.300" endtime="20211108 10:38:47.300"/>
</kw>
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:47.300" endtime="20211108 10:38:47.300"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=After</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:47.300" endtime="20211108 10:38:47.301"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Clear</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:47.301" endtime="20211108 10:38:47.302"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:47.318" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:47.318" endtime="20211108 10:38:47.318"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:47.319" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:47.319" endtime="20211108 10:38:47.319"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:47.319" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:47.319" endtime="20211108 10:38:47.319"/>
</kw>
<status status="PASS" starttime="20211108 10:38:47.302" endtime="20211108 10:38:47.319"/>
</kw>
<status status="PASS" starttime="20211108 10:38:47.302" endtime="20211108 10:38:47.319"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:48.320" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:47.319" endtime="20211108 10:38:48.320"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages2}</var>
<arg>${MAIN_THREAD}</arg>
<arg>decode_format=utf-8</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:48.321" level="INFO">${thread_messages2} = ['After', 'Clear']</msg>
<status status="PASS" starttime="20211108 10:38:48.320" endtime="20211108 10:38:48.321"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${data}</var>
<arg>After</arg>
<arg>Clear</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:48.321" level="INFO">${data} = ['After', 'Clear']</msg>
<status status="PASS" starttime="20211108 10:38:48.321" endtime="20211108 10:38:48.321"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${data}</arg>
<arg>${thread_messages2}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:48.321" endtime="20211108 10:38:48.322"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${PRODUCER_ID}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=LAST</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:48.322" endtime="20211108 10:38:48.322"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${PRODUCER_ID}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${PRODUCER_ID}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:48.330" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:48.323" endtime="20211108 10:38:48.330"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:48.331" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:48.330" endtime="20211108 10:38:48.331"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:48.331" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:48.331" endtime="20211108 10:38:48.331"/>
</kw>
<status status="PASS" starttime="20211108 10:38:48.323" endtime="20211108 10:38:48.331"/>
</kw>
<status status="PASS" starttime="20211108 10:38:48.323" endtime="20211108 10:38:48.331"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1sec</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:49.332" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:48.331" endtime="20211108 10:38:49.332"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${data}</arg>
<arg>LAST</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.332" endtime="20211108 10:38:49.333"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages2}</var>
<arg>${MAIN_THREAD}</arg>
<arg>decode_format=utf-8</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:38:49.333" level="INFO">${thread_messages2} = ['After', 'Clear', 'LAST']</msg>
<status status="PASS" starttime="20211108 10:38:49.333" endtime="20211108 10:38:49.333"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${thread_messages1}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:49.333" endtime="20211108 10:38:49.334"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${data}</arg>
<arg>${thread_messages2}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:38:49.334" endtime="20211108 10:38:49.334"/>
</kw>
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="TEARDOWN">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:38:49.334" endtime="20211108 10:38:49.335"/>
</kw>
<status status="PASS" starttime="20211108 10:38:46.287" endtime="20211108 10:38:49.335"/>
</test>
<test id="s1-s1-t10" name="Purge Test">
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:38:49.338" level="INFO">${producer_id} = b855b28c-77f1-486d-8501-83d1dc7393d9</msg>
<status status="PASS" starttime="20211108 10:38:49.337" endtime="20211108 10:38:49.338"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=After</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:49.338" endtime="20211108 10:38:49.339"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=${TEST_TOPIC}</arg>
<arg>value=Clear</arg>
<arg>partition=${P_ID}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:49.339" endtime="20211108 10:38:49.340"/>
</kw>
<kw name="Purge" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>in_queue=${False}</arg>
<status status="PASS" starttime="20211108 10:38:49.340" endtime="20211108 10:38:49.341"/>
</kw>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<arg>timeout=${0}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:49.341" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20211108 10:38:49.341" endtime="20211108 10:38:49.341"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>2</arg>
<arg>${count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:49.342" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:49.342" endtime="20211108 10:38:49.342"/>
</kw>
<kw name="Purge" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<status status="PASS" starttime="20211108 10:38:49.342" endtime="20211108 10:38:49.342"/>
</kw>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<arg>timeout=${0}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:49.343" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:49.342" endtime="20211108 10:38:49.343"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>0</arg>
<arg>${count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:49.343" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:49.343" endtime="20211108 10:38:49.343"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.337" endtime="20211108 10:38:49.343"/>
</test>
<status status="PASS" starttime="20211108 10:38:05.116" endtime="20211108 10:38:49.344"/>
</suite>
<suite id="s1-s2" name="Test Adminclient" source="/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples/test_adminclient.robot">
<test id="s1-s2-t1" name="AdminClient Topic Creation">
<kw name="Create List" library="BuiltIn">
<var>${topic_names}</var>
<arg>admintesting1</arg>
<arg>admintesting2</arg>
<arg>admintesting3</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:49.350" level="INFO">${topic_names} = ['admintesting1', 'admintesting2', 'admintesting3']</msg>
<status status="PASS" starttime="20211108 10:38:49.349" endtime="20211108 10:38:49.350"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${topics}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:49.350" level="INFO">${topics} = []</msg>
<status status="PASS" starttime="20211108 10:38:49.350" endtime="20211108 10:38:49.350"/>
</kw>
<for flavor="IN">
<var>${topic}</var>
<value>@{topic_names}</value>
<iter>
<var name="${topic}">admintesting1</var>
<kw name="New Topic" library="ConfluentKafkaLibrary">
<var>${topic}</var>
<arg>${topic}</arg>
<arg>num_partitions=${1}</arg>
<arg>replication_factor=${1}</arg>
<doc>Instantiate a NewTopic object. Specifies per-topic settings for passing to AdminClient.create_topics().
- ``topic`` (str): Topic name
Note: In a multi-cluster production scenario, it is more typical to use a
replication_factor of 3 for durability.</doc>
<msg timestamp="20211108 10:38:49.351" level="INFO">${topic} = NewTopic(topic=admintesting1,num_partitions=1)</msg>
<status status="PASS" starttime="20211108 10:38:49.350" endtime="20211108 10:38:49.351"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.351" endtime="20211108 10:38:49.351"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.350" endtime="20211108 10:38:49.351"/>
</iter>
<iter>
<var name="${topic}">admintesting2</var>
<kw name="New Topic" library="ConfluentKafkaLibrary">
<var>${topic}</var>
<arg>${topic}</arg>
<arg>num_partitions=${1}</arg>
<arg>replication_factor=${1}</arg>
<doc>Instantiate a NewTopic object. Specifies per-topic settings for passing to AdminClient.create_topics().
- ``topic`` (str): Topic name
Note: In a multi-cluster production scenario, it is more typical to use a
replication_factor of 3 for durability.</doc>
<msg timestamp="20211108 10:38:49.352" level="INFO">${topic} = NewTopic(topic=admintesting2,num_partitions=1)</msg>
<status status="PASS" starttime="20211108 10:38:49.351" endtime="20211108 10:38:49.352"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.353" endtime="20211108 10:38:49.353"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.351" endtime="20211108 10:38:49.353"/>
</iter>
<iter>
<var name="${topic}">admintesting3</var>
<kw name="New Topic" library="ConfluentKafkaLibrary">
<var>${topic}</var>
<arg>${topic}</arg>
<arg>num_partitions=${1}</arg>
<arg>replication_factor=${1}</arg>
<doc>Instantiate a NewTopic object. Specifies per-topic settings for passing to AdminClient.create_topics().
- ``topic`` (str): Topic name
Note: In a multi-cluster production scenario, it is more typical to use a
replication_factor of 3 for durability.</doc>
<msg timestamp="20211108 10:38:49.354" level="INFO">${topic} = NewTopic(topic=admintesting3,num_partitions=1)</msg>
<status status="PASS" starttime="20211108 10:38:49.353" endtime="20211108 10:38:49.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.354" endtime="20211108 10:38:49.354"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.353" endtime="20211108 10:38:49.354"/>
</iter>
<status status="PASS" starttime="20211108 10:38:49.350" endtime="20211108 10:38:49.354"/>
</for>
<kw name="Create Admin Client" library="ConfluentKafkaLibrary">
<var>${admin_client_id}</var>
<msg timestamp="20211108 10:38:49.355" level="INFO">${admin_client_id} = 529116a7-46d1-43c6-bdd1-0d307ca5eb25</msg>
<status status="PASS" starttime="20211108 10:38:49.354" endtime="20211108 10:38:49.355"/>
</kw>
<kw name="Create Topics" library="ConfluentKafkaLibrary">
<arg>group_id=${admin_client_id}</arg>
<arg>new_topics=${topics}</arg>
<doc>Create one or more new topics and wait for each one to finish.
- ``new_topics`` (list(NewTopic) or NewTopic): A list of specifications (NewTopic)
    or a single instance for the topics that should be created.</doc>
<msg timestamp="20211108 10:38:49.427" level="INFO">Topic admintesting1 created
Topic admintesting2 created
Topic admintesting3 created</msg>
<status status="PASS" starttime="20211108 10:38:49.355" endtime="20211108 10:38:49.427"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:38:49.429" level="INFO">${group_id} = 1c72516b-1674-4d8e-a5ae-10cc2370d078</msg>
<status status="PASS" starttime="20211108 10:38:49.427" endtime="20211108 10:38:49.429"/>
</kw>
<kw name="List Topics" library="ConfluentKafkaLibrary">
<var>${topics}</var>
<arg>${group_id}</arg>
<doc>Request Metadata from cluster. Could be executed with consumer or producer group_id too.
- ``topic`` (str):  If specified, only request info about this topic, else return for all topics in cluster.
Default: `None`.
- ``group_id`` (str): *required* id of the created consumer or producer.</doc>
<msg timestamp="20211108 10:38:49.435" level="INFO">${topics} = {'test': TopicMetadata(test, 1 partitions), 'topicwithoutvaluee': TopicMetadata(topicwithoutvaluee, 1 partitions), '_schemas': TopicMetadata(_schemas, 1 partitions), 'admintesting2': TopicMetadata(adm...</msg>
<status status="PASS" starttime="20211108 10:38:49.429" endtime="20211108 10:38:49.435"/>
</kw>
<for flavor="IN">
<var>${topic}</var>
<value>@{topic_names}</value>
<iter>
<var name="${topic}">admintesting1</var>
<kw name="List Should Contain Value" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.435" endtime="20211108 10:38:49.435"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.435" endtime="20211108 10:38:49.435"/>
</iter>
<iter>
<var name="${topic}">admintesting2</var>
<kw name="List Should Contain Value" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.435" endtime="20211108 10:38:49.436"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.435" endtime="20211108 10:38:49.436"/>
</iter>
<iter>
<var name="${topic}">admintesting3</var>
<kw name="List Should Contain Value" library="Collections">
<arg>${topics}</arg>
<arg>${topic}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20211108 10:38:49.436" endtime="20211108 10:38:49.436"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.436" endtime="20211108 10:38:49.436"/>
</iter>
<status status="PASS" starttime="20211108 10:38:49.435" endtime="20211108 10:38:49.436"/>
</for>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:38:49.436" endtime="20211108 10:38:49.441"/>
</kw>
<kw name="Delete Topics" library="ConfluentKafkaLibrary" type="TEARDOWN">
<arg>${admin_client_id}</arg>
<arg>${topic_names}</arg>
<msg timestamp="20211108 10:38:49.537" level="INFO">Topic admintesting1 deleted
Topic admintesting2 deleted
Topic admintesting3 deleted</msg>
<status status="PASS" starttime="20211108 10:38:49.441" endtime="20211108 10:38:49.537"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.349" endtime="20211108 10:38:49.537"/>
</test>
<test id="s1-s2-t2" name="AdminClient New Partitions">
<kw name="Set Variable" library="BuiltIn">
<var>${topic_name}</var>
<arg>admin_testing_partition</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:49.538" level="INFO">${topic_name} = admin_testing_partition</msg>
<status status="PASS" starttime="20211108 10:38:49.538" endtime="20211108 10:38:49.538"/>
</kw>
<kw name="New Topic" library="ConfluentKafkaLibrary">
<var>${topic}</var>
<arg>${topic_name}</arg>
<arg>num_partitions=${1}</arg>
<arg>replication_factor=${1}</arg>
<doc>Instantiate a NewTopic object. Specifies per-topic settings for passing to AdminClient.create_topics().
- ``topic`` (str): Topic name
Note: In a multi-cluster production scenario, it is more typical to use a
replication_factor of 3 for durability.</doc>
<msg timestamp="20211108 10:38:49.540" level="INFO">${topic} = NewTopic(topic=admin_testing_partition,num_partitions=1)</msg>
<status status="PASS" starttime="20211108 10:38:49.539" endtime="20211108 10:38:49.540"/>
</kw>
<kw name="Create Admin Client" library="ConfluentKafkaLibrary">
<var>${admin_client_id}</var>
<msg timestamp="20211108 10:38:49.540" level="INFO">${admin_client_id} = 58ea3bd2-5fb4-4fe8-9ef0-590e0817b780</msg>
<status status="PASS" starttime="20211108 10:38:49.540" endtime="20211108 10:38:49.540"/>
</kw>
<kw name="Create Topics" library="ConfluentKafkaLibrary">
<arg>group_id=${admin_client_id}</arg>
<arg>new_topics=${topic}</arg>
<doc>Create one or more new topics and wait for each one to finish.
- ``new_topics`` (list(NewTopic) or NewTopic): A list of specifications (NewTopic)
    or a single instance for the topics that should be created.</doc>
<msg timestamp="20211108 10:38:49.592" level="INFO">Topic admin_testing_partition created</msg>
<status status="PASS" starttime="20211108 10:38:49.541" endtime="20211108 10:38:49.593"/>
</kw>
<kw name="New Partitions" library="ConfluentKafkaLibrary">
<var>${new_parts}</var>
<arg>${topic_name}</arg>
<arg>new_total_count=${2}</arg>
<doc>Instantiate a NewPartitions object.
- ``topic`` (str): Topic name</doc>
<msg timestamp="20211108 10:38:49.594" level="INFO">${new_parts} = NewPartitions(topic=admin_testing_partition,new_total_count=2)</msg>
<status status="PASS" starttime="20211108 10:38:49.593" endtime="20211108 10:38:49.594"/>
</kw>
<kw name="Create Partitions" library="ConfluentKafkaLibrary">
<arg>group_id=${admin_client_id}</arg>
<arg>new_partitions=${new_parts}</arg>
<doc>Create additional partitions for the given topics.
- ``new_partitions``  (list(NewPartitions) or NewPartitions): New partitions to be created.</doc>
<msg timestamp="20211108 10:38:49.625" level="INFO">Additional partitions created for topic admin_testing_partition</msg>
<status status="PASS" starttime="20211108 10:38:49.594" endtime="20211108 10:38:49.625"/>
</kw>
<kw name="Delete Topics" library="ConfluentKafkaLibrary" type="TEARDOWN">
<arg>${admin_client_id}</arg>
<arg>${topic_name}</arg>
<msg timestamp="20211108 10:38:49.640" level="INFO">Topic admin_testing_partition deleted</msg>
<status status="PASS" starttime="20211108 10:38:49.625" endtime="20211108 10:38:49.640"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.538" endtime="20211108 10:38:49.640"/>
</test>
<test id="s1-s2-t3" name="AdminClient Describe Configs">
<kw name="Config Resource" library="ConfluentKafkaLibrary">
<var>${resource}</var>
<arg>${ADMIN_RESOURCE_BROKER}</arg>
<arg>1</arg>
<doc>Represents a resource that has configuration, and (optionally) a collection of configuration properties
for that resource. Used by describe_configs() and alter_configs().
- ``restype`` (ConfigResource.Type): The resource type.
-  ``name`` (str): The resource name, which depends on the resource type. For RESOURCE_BROKER,
    the resource name is the broker id.</doc>
<msg timestamp="20211108 10:38:49.642" level="INFO">${resource} = ConfigResource(Type.BROKER,1)</msg>
<status status="PASS" starttime="20211108 10:38:49.641" endtime="20211108 10:38:49.642"/>
</kw>
<kw name="Create Admin Client" library="ConfluentKafkaLibrary">
<var>${admin_client_id}</var>
<msg timestamp="20211108 10:38:49.642" level="INFO">${admin_client_id} = 58642c3c-6a08-4202-82a1-150502de4cfd</msg>
<status status="PASS" starttime="20211108 10:38:49.642" endtime="20211108 10:38:49.642"/>
</kw>
<kw name="Describe Configs" library="ConfluentKafkaLibrary">
<var>${config}</var>
<arg>${admin_client_id}</arg>
<arg>${resource}</arg>
<doc>Get the configuration of the specified resources.
- ``resources``  (list(ConfigResource) or ConfigResource): Resources to get the configuration for.</doc>
<msg timestamp="20211108 10:38:49.683" level="INFO">${config} = {'advertised.host.name': ConfigEntry(advertised.host.name="None"), 'log.cleaner.min.compaction.lag.ms': ConfigEntry(log.cleaner.min.compaction.lag.ms="0"), 'metric.reporters': ConfigEntry(metric.repor...</msg>
<status status="PASS" starttime="20211108 10:38:49.642" endtime="20211108 10:38:49.683"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${config}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211108 10:38:49.683" level="INFO">Length is 190</msg>
<status status="PASS" starttime="20211108 10:38:49.683" endtime="20211108 10:38:49.683"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${name}</var>
<arg>${config['offsets.commit.timeout.ms'].name}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:49.684" level="INFO">${name} = offsets.commit.timeout.ms</msg>
<status status="PASS" starttime="20211108 10:38:49.683" endtime="20211108 10:38:49.684"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${config['offsets.commit.timeout.ms'].value}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:49.685" level="INFO">${value} = 5000</msg>
<status status="PASS" starttime="20211108 10:38:49.684" endtime="20211108 10:38:49.685"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${name}</arg>
<arg>offsets.commit.timeout.ms</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211108 10:38:49.685" endtime="20211108 10:38:49.685"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${value}</arg>
<arg>${5000}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:49.686" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:49.685" endtime="20211108 10:38:49.686"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.641" endtime="20211108 10:38:49.686"/>
</test>
<test id="s1-s2-t4" name="AdminClient Alter Configs">
<kw name="Create Dictionary" library="BuiltIn">
<var>${data}</var>
<arg>log.retention.ms=${54321}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:38:49.688" level="INFO">${data} = {'log.retention.ms': 54321}</msg>
<status status="PASS" starttime="20211108 10:38:49.687" endtime="20211108 10:38:49.688"/>
</kw>
<kw name="Convert To Dictionary" library="Collections">
<var>${data}</var>
<arg>${data}</arg>
<doc>Converts the given ``item`` to a Python ``dict`` type.</doc>
<msg timestamp="20211108 10:38:49.689" level="INFO">${data} = {'log.retention.ms': 54321}</msg>
<status status="PASS" starttime="20211108 10:38:49.688" endtime="20211108 10:38:49.689"/>
</kw>
<kw name="Config Resource" library="ConfluentKafkaLibrary">
<var>${resource}</var>
<arg>${ADMIN_RESOURCE_BROKER}</arg>
<arg>1</arg>
<arg>set_config=${data}</arg>
<doc>Represents a resource that has configuration, and (optionally) a collection of configuration properties
for that resource. Used by describe_configs() and alter_configs().
- ``restype`` (ConfigResource.Type): The resource type.
-  ``name`` (str): The resource name, which depends on the resource type. For RESOURCE_BROKER,
    the resource name is the broker id.</doc>
<msg timestamp="20211108 10:38:49.689" level="INFO">${resource} = ConfigResource(Type.BROKER,1)</msg>
<status status="PASS" starttime="20211108 10:38:49.689" endtime="20211108 10:38:49.689"/>
</kw>
<kw name="Create Admin Client" library="ConfluentKafkaLibrary">
<var>${admin_client_id}</var>
<msg timestamp="20211108 10:38:49.690" level="INFO">${admin_client_id} = 20e30df8-92c3-47b8-8807-fe6dc4b7c7ab</msg>
<status status="PASS" starttime="20211108 10:38:49.689" endtime="20211108 10:38:49.690"/>
</kw>
<kw name="Alter Configs" library="ConfluentKafkaLibrary">
<arg>${admin_client_id}</arg>
<arg>${resource}</arg>
<doc>Update configuration properties for the specified resources.
- ``resources``  (list(ConfigResource) or ConfigResource): Resources to update configuration of.</doc>
<msg timestamp="20211108 10:38:49.728" level="INFO">ConfigResource(Type.BROKER,1) configuration successfully altered</msg>
<status status="PASS" starttime="20211108 10:38:49.691" endtime="20211108 10:38:49.728"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:38:50.729" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:38:49.728" endtime="20211108 10:38:50.729"/>
</kw>
<kw name="Describe Configs" library="ConfluentKafkaLibrary">
<var>${config}</var>
<arg>${admin_client_id}</arg>
<arg>${resource}</arg>
<doc>Get the configuration of the specified resources.
- ``resources``  (list(ConfigResource) or ConfigResource): Resources to get the configuration for.</doc>
<msg timestamp="20211108 10:38:50.740" level="INFO">${config} = {'advertised.host.name': ConfigEntry(advertised.host.name="None"), 'log.cleaner.min.compaction.lag.ms': ConfigEntry(log.cleaner.min.compaction.lag.ms="0"), 'metric.reporters': ConfigEntry(metric.repor...</msg>
<status status="PASS" starttime="20211108 10:38:50.729" endtime="20211108 10:38:50.740"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${54321}</arg>
<arg>${config['log.retention.ms'].value}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:50.741" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:50.740" endtime="20211108 10:38:50.742"/>
</kw>
<status status="PASS" starttime="20211108 10:38:49.687" endtime="20211108 10:38:50.742"/>
</test>
<status status="PASS" starttime="20211108 10:38:49.347" endtime="20211108 10:38:50.743"/>
</suite>
<suite id="s1-s3" name="Test Avro" source="/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples/test_avro.robot">
<kw name="Starting Test" type="SETUP">
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{TEST_TOPIC}</arg>
<arg>avro_testing1</arg>
<arg>avro_testing2</arg>
<arg>avro_testing3</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:50.754" level="INFO">@{TEST_TOPIC} = [ avro_testing1 | avro_testing2 | avro_testing3 ]</msg>
<status status="PASS" starttime="20211108 10:38:50.753" endtime="20211108 10:38:50.754"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${KEY}</arg>
<arg>568a68fd-2785-44cc-8997-1295c3755d28</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:50.755" level="INFO">${KEY} = 568a68fd-2785-44cc-8997-1295c3755d28</msg>
<status status="PASS" starttime="20211108 10:38:50.754" endtime="20211108 10:38:50.755"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>&amp;{KEY_FOR_SCHEMA}</arg>
<arg>name=testkey</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:50.756" level="INFO">&amp;{KEY_FOR_SCHEMA} = { name=testkey }</msg>
<status status="PASS" starttime="20211108 10:38:50.755" endtime="20211108 10:38:50.756"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${value}</var>
<arg>name=Robot</arg>
<arg>number=${10}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:38:50.756" level="INFO">${value} = {'name': 'Robot', 'number': 10}</msg>
<status status="PASS" starttime="20211108 10:38:50.756" endtime="20211108 10:38:50.756"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${data}</var>
<arg>${value}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20211108 10:38:50.757" level="INFO">${data} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:38:50.756" endtime="20211108 10:38:50.757"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${data}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:38:50.758" level="INFO">${TEST_DATA} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:38:50.757" endtime="20211108 10:38:50.758"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${value_schema}</var>
<arg>{"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:50.758" level="INFO">${value_schema} = {"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</msg>
<status status="PASS" starttime="20211108 10:38:50.758" endtime="20211108 10:38:50.758"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${key_schema}</var>
<arg>{"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"}]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:38:50.758" level="INFO">${key_schema} = {"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"}]}</msg>
<status status="PASS" starttime="20211108 10:38:50.758" endtime="20211108 10:38:50.758"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<arg>value_schema=${value_schema}</arg>
<arg>key_schema=${key_schema}</arg>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:38:50.760" level="INFO">${producer_id} = 9943a163-357f-4da8-86ae-06a18d035be0</msg>
<status status="PASS" starttime="20211108 10:38:50.758" endtime="20211108 10:38:50.760"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing1</arg>
<arg>partition=${0}</arg>
<arg>value=${value}</arg>
<arg>key=${KEY_FOR_SCHEMA}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:50.760" endtime="20211108 10:38:51.101"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:51.203" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:51.102" endtime="20211108 10:38:51.203"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:51.203" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:51.203" endtime="20211108 10:38:51.203"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:51.204" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:51.204" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:51.204" endtime="20211108 10:38:51.204"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:51.101" endtime="20211108 10:38:51.205"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:51.807" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:51.706" endtime="20211108 10:38:51.807"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:51.807" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:51.807" endtime="20211108 10:38:51.807"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:51.808" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:51.808" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:51.808" endtime="20211108 10:38:51.808"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:51.705" endtime="20211108 10:38:51.809"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:52.411" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:52.310" endtime="20211108 10:38:52.411"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:52.412" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:52.412" endtime="20211108 10:38:52.412"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:52.412" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:52.413" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:52.412" endtime="20211108 10:38:52.413"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:52.309" endtime="20211108 10:38:52.413"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:52.915" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:52.915" endtime="20211108 10:38:52.915"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:52.915" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:52.915" endtime="20211108 10:38:52.915"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:52.916" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:52.915" endtime="20211108 10:38:52.916"/>
</kw>
<status status="PASS" starttime="20211108 10:38:52.914" endtime="20211108 10:38:52.916"/>
</kw>
<status status="PASS" starttime="20211108 10:38:51.101" endtime="20211108 10:38:52.916"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing2</arg>
<arg>partition=${0}</arg>
<arg>value=${value}</arg>
<arg>key=${KEY_FOR_SCHEMA}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:38:52.916" endtime="20211108 10:38:52.955"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:53.057" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:52.955" endtime="20211108 10:38:53.057"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:53.058" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:53.057" endtime="20211108 10:38:53.058"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:53.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:53.058" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:53.058" endtime="20211108 10:38:53.058"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:52.955" endtime="20211108 10:38:53.059"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:53.661" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:53.560" endtime="20211108 10:38:53.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:53.662" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:53.661" endtime="20211108 10:38:53.662"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:53.662" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:53.662" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:53.662" endtime="20211108 10:38:53.662"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:53.560" endtime="20211108 10:38:53.663"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:54.265" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:38:54.164" endtime="20211108 10:38:54.265"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:54.266" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:38:54.266" endtime="20211108 10:38:54.266"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:54.266" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:38:54.267" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:38:54.266" endtime="20211108 10:38:54.267"/>
</kw>
<status status="FAIL" starttime="20211108 10:38:54.164" endtime="20211108 10:38:54.267"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:38:54.768" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:38:54.768" endtime="20211108 10:38:54.768"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:38:54.769" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:38:54.768" endtime="20211108 10:38:54.769"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:38:54.769" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:38:54.769" endtime="20211108 10:38:54.769"/>
</kw>
<status status="PASS" starttime="20211108 10:38:54.768" endtime="20211108 10:38:54.769"/>
</kw>
<status status="PASS" starttime="20211108 10:38:52.955" endtime="20211108 10:38:54.769"/>
</kw>
<kw name="Start Consumer Threaded" library="ConfluentKafkaLibrary">
<var>${thread}</var>
<arg>topics=${TEST_TOPIC}</arg>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<arg>auto_offset_reset=latest</arg>
<doc>Run consumer in daemon thread and store data from topics. To read and work with this
   collected data use keyword `Get Messages From Thread`.
   Could be used at the Test setup or in each test.
   This is useful when you are reading always the same topics and you don't want to create
   consumer in each test to poll data. You can create as many consumers in the Test setup
   as you want and then in test just read data with `Get Messages From Thread` keyword.
- ``topics`` (list): List of topics for subscription.
- ``group_id`` (str or uuid.uuid4() if not set) : name of the consumer group to join for
    dynamic partition assignment (if enabled), and to use for fetching and
    committing offsets. If None, unique string is generated  (via uuid.uuid4())
    and offset commits are disabled. Default: `None`.</doc>
<msg timestamp="20211108 10:39:04.778" level="INFO">${thread} = &lt;GetMessagesThread(Thread-2, started daemon 140689387947776)&gt;</msg>
<status status="PASS" starttime="20211108 10:38:54.769" endtime="20211108 10:39:04.778"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${MAIN_THREAD}</arg>
<arg>${thread}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20211108 10:39:04.779" level="INFO">${MAIN_THREAD} = &lt;GetMessagesThread(Thread-2, started daemon 140689387947776)&gt;</msg>
<status status="PASS" starttime="20211108 10:39:04.778" endtime="20211108 10:39:04.779"/>
</kw>
<status status="PASS" starttime="20211108 10:38:50.753" endtime="20211108 10:39:04.779"/>
</kw>
<test id="s1-s3-t1" name="Avro Producer With Schemas As String Argument">
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="SETUP">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:39:04.780" endtime="20211108 10:39:04.780"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${value_schema}</var>
<arg>{"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:39:04.781" level="INFO">${value_schema} = {"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</msg>
<status status="PASS" starttime="20211108 10:39:04.780" endtime="20211108 10:39:04.781"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${key_schema}</var>
<arg>{"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"}]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:39:04.781" level="INFO">${key_schema} = {"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"}]}</msg>
<status status="PASS" starttime="20211108 10:39:04.781" endtime="20211108 10:39:04.781"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<arg>value_schema=${value_schema}</arg>
<arg>key_schema=${key_schema}</arg>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:39:04.782" level="INFO">${producer_id} = 2170756f-4a78-42f2-8532-3da191af3d3e</msg>
<status status="PASS" starttime="20211108 10:39:04.781" endtime="20211108 10:39:04.782"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${value}</var>
<arg>name=Robot</arg>
<arg>number=${10}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:39:04.784" level="INFO">${value} = {'name': 'Robot', 'number': 10}</msg>
<status status="PASS" starttime="20211108 10:39:04.782" endtime="20211108 10:39:04.784"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing1</arg>
<arg>partition=${0}</arg>
<arg>value=${value}</arg>
<arg>key=${KEY_FOR_SCHEMA}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:39:04.784" endtime="20211108 10:39:04.800"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:04.902" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:04.801" endtime="20211108 10:39:04.902"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:04.903" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:04.902" endtime="20211108 10:39:04.903"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:04.903" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:04.904" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:04.903" endtime="20211108 10:39:04.904"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:04.801" endtime="20211108 10:39:04.904"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:05.506" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:05.405" endtime="20211108 10:39:05.506"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:05.507" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:05.506" endtime="20211108 10:39:05.507"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:05.507" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:05.507" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:05.507" endtime="20211108 10:39:05.507"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:05.405" endtime="20211108 10:39:05.508"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:06.010" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:39:06.009" endtime="20211108 10:39:06.010"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:06.010" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:39:06.010" endtime="20211108 10:39:06.010"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:06.010" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:39:06.010" endtime="20211108 10:39:06.010"/>
</kw>
<status status="PASS" starttime="20211108 10:39:06.008" endtime="20211108 10:39:06.010"/>
</kw>
<status status="PASS" starttime="20211108 10:39:04.801" endtime="20211108 10:39:06.011"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:39:07.011" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:39:06.011" endtime="20211108 10:39:07.011"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${consumer_group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:39:07.013" level="INFO">${consumer_group_id} = 158fb8e0-52f5-4258-a559-0ba928c92e9e</msg>
<status status="PASS" starttime="20211108 10:39:07.012" endtime="20211108 10:39:07.013"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${consumer_group_id}</arg>
<arg>topics=avro_testing1</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:39:07.013" endtime="20211108 10:39:07.014"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${consumer_group_id}</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:39:07.140" level="WARN">Fast avro failed for schema with id 1, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:07.145" level="WARN">Fast avro failed for schema with id 2, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:07.146" level="INFO">${messages} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:39:07.014" endtime="20211108 10:39:07.147"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${messages}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:39:07.147" endtime="20211108 10:39:07.147"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages}</var>
<arg>${MAIN_THREAD}</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:39:07.147" level="INFO">${thread_messages} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:39:07.147" endtime="20211108 10:39:07.147"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${thread_messages}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:39:07.148" endtime="20211108 10:39:07.148"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${consumer_group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:39:07.148" endtime="20211108 10:39:07.149"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:39:07.149" endtime="20211108 10:39:07.155"/>
</kw>
<status status="PASS" starttime="20211108 10:39:07.148" endtime="20211108 10:39:07.155"/>
</kw>
<status status="PASS" starttime="20211108 10:39:04.780" endtime="20211108 10:39:07.155"/>
</test>
<test id="s1-s3-t2" name="Avro Producer With Path To Schemas">
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="SETUP">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:39:07.156" endtime="20211108 10:39:07.156"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${value_schema_file_path}</var>
<arg>examples/schema/producer/ValueSchema.avsc</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:39:07.157" level="INFO">${value_schema_file_path} = examples/schema/producer/ValueSchema.avsc</msg>
<status status="PASS" starttime="20211108 10:39:07.156" endtime="20211108 10:39:07.157"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${key_schema_file_path}</var>
<arg>examples/schema/producer/KeySchema.avsc</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:39:07.157" level="INFO">${key_schema_file_path} = examples/schema/producer/KeySchema.avsc</msg>
<status status="PASS" starttime="20211108 10:39:07.157" endtime="20211108 10:39:07.157"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<arg>value_schema=${value_schema_file_path}</arg>
<arg>key_schema=${key_schema_file_path}</arg>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:39:07.158" level="INFO">${producer_id} = dee1a2f1-bacb-4102-840f-31a53796b748</msg>
<status status="PASS" starttime="20211108 10:39:07.157" endtime="20211108 10:39:07.158"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${value}</var>
<arg>name=Robot</arg>
<arg>number=${10}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:39:07.159" level="INFO">${value} = {'name': 'Robot', 'number': 10}</msg>
<status status="PASS" starttime="20211108 10:39:07.158" endtime="20211108 10:39:07.159"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing2</arg>
<arg>partition=${0}</arg>
<arg>value=${value}</arg>
<arg>key=${KEY_FOR_SCHEMA}</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:39:07.159" endtime="20211108 10:39:07.173"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:07.275" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:07.174" endtime="20211108 10:39:07.275"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:07.276" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:07.276" endtime="20211108 10:39:07.276"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:07.276" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:07.277" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:07.276" endtime="20211108 10:39:07.277"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:07.174" endtime="20211108 10:39:07.277"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:07.880" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:07.779" endtime="20211108 10:39:07.880"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:07.880" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:07.880" endtime="20211108 10:39:07.880"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:07.881" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:07.881" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:07.881" endtime="20211108 10:39:07.881"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:07.778" endtime="20211108 10:39:07.882"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:08.383" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:39:08.383" endtime="20211108 10:39:08.383"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:08.384" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:39:08.383" endtime="20211108 10:39:08.384"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:08.384" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:39:08.384" endtime="20211108 10:39:08.384"/>
</kw>
<status status="PASS" starttime="20211108 10:39:08.382" endtime="20211108 10:39:08.384"/>
</kw>
<status status="PASS" starttime="20211108 10:39:07.173" endtime="20211108 10:39:08.384"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20211108 10:39:09.385" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20211108 10:39:08.384" endtime="20211108 10:39:09.385"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${consumer_group_id}</var>
<arg>auto_offset_reset=earliest</arg>
<arg>schema_registry_url=http://127.0.0.1:8081</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:39:09.387" level="INFO">${consumer_group_id} = 154aac25-080c-41be-a53c-4ca513d11253</msg>
<status status="PASS" starttime="20211108 10:39:09.385" endtime="20211108 10:39:09.387"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${consumer_group_id}</arg>
<arg>topics=avro_testing2</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:39:09.387" endtime="20211108 10:39:09.388"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${consumer_group_id}</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:39:09.510" level="WARN">Fast avro failed for schema with id 1, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:09.515" level="WARN">Fast avro failed for schema with id 2, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:09.515" level="INFO">${messages} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:39:09.389" endtime="20211108 10:39:09.515"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${messages}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:39:09.515" endtime="20211108 10:39:09.516"/>
</kw>
<kw name="Get Messages From Thread" library="ConfluentKafkaLibrary">
<var>${thread_messages}</var>
<arg>${MAIN_THREAD}</arg>
<doc>Returns all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword
- ``decode_format`` (str) - If you need to decode data to specific format
    (See https://docs.python.org/3/library/codecs.html#standard-encodings). Default: None.</doc>
<msg timestamp="20211108 10:39:09.516" level="INFO">${thread_messages} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:39:09.516" endtime="20211108 10:39:09.516"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${TEST_DATA}</arg>
<arg>${thread_messages}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:39:09.516" endtime="20211108 10:39:09.516"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${consumer_group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:39:09.517" endtime="20211108 10:39:09.520"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:39:09.520" endtime="20211108 10:39:09.523"/>
</kw>
<status status="PASS" starttime="20211108 10:39:09.517" endtime="20211108 10:39:09.523"/>
</kw>
<status status="PASS" starttime="20211108 10:39:07.156" endtime="20211108 10:39:09.524"/>
</test>
<test id="s1-s3-t3" name="Avro Producer Consumer With Serializers">
<kw name="Clear Messages From Thread" library="ConfluentKafkaLibrary" type="SETUP">
<arg>${MAIN_THREAD}</arg>
<doc>Remove all records gathered from specific thread
- ``running_thread`` (Thread object) - thread which was executed with
    `Start Consumer Threaded` keyword</doc>
<status status="PASS" starttime="20211108 10:39:09.524" endtime="20211108 10:39:09.525"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${schema_registry_conf}</var>
<arg>url=http://127.0.0.1:8081</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:39:09.525" level="INFO">${schema_registry_conf} = {'url': 'http://127.0.0.1:8081'}</msg>
<status status="PASS" starttime="20211108 10:39:09.525" endtime="20211108 10:39:09.525"/>
</kw>
<kw name="Get Schema Registry Client" library="ConfluentKafkaLibrary">
<var>${schema_registry_client}</var>
<arg>${schema_registry_conf}</arg>
<msg timestamp="20211108 10:39:09.526" level="INFO">${schema_registry_client} = &lt;confluent_kafka.schema_registry.schema_registry_client.SchemaRegistryClient object at 0x7ff53c109ac0&gt;</msg>
<status status="PASS" starttime="20211108 10:39:09.525" endtime="20211108 10:39:09.526"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${schema_str}</var>
<arg>{"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20211108 10:39:09.526" level="INFO">${schema_str} = {"namespace": "example.avro","type": "record","name": "User","fields": [{"name": "name","type": "string"},{"name": "number","type": ["int","null"]}]}</msg>
<status status="PASS" starttime="20211108 10:39:09.526" endtime="20211108 10:39:09.526"/>
</kw>
<kw name="Get Avro Serializer" library="ConfluentKafkaLibrary">
<var>${avro_serializer}</var>
<arg>${schema_str}</arg>
<arg>${schema_registry_client}</arg>
<msg timestamp="20211108 10:39:09.526" level="INFO">${avro_serializer} = &lt;confluent_kafka.schema_registry.avro.AvroSerializer object at 0x7ff53c19f200&gt;</msg>
<status status="PASS" starttime="20211108 10:39:09.526" endtime="20211108 10:39:09.526"/>
</kw>
<kw name="Get Avro Deserializer" library="ConfluentKafkaLibrary">
<var>${avro_deserializer}</var>
<arg>${schema_str}</arg>
<arg>${schema_registry_client}</arg>
<msg timestamp="20211108 10:39:09.527" level="INFO">${avro_deserializer} = &lt;confluent_kafka.schema_registry.avro.AvroDeserializer object at 0x7ff53c1acc70&gt;</msg>
<status status="PASS" starttime="20211108 10:39:09.526" endtime="20211108 10:39:09.527"/>
</kw>
<kw name="Get String Serializer" library="ConfluentKafkaLibrary">
<var>${string_serializer}</var>
<msg timestamp="20211108 10:39:09.527" level="INFO">${string_serializer} = &lt;confluent_kafka.serialization.StringSerializer object at 0x7ff53c142220&gt;</msg>
<status status="PASS" starttime="20211108 10:39:09.527" endtime="20211108 10:39:09.527"/>
</kw>
<kw name="Get String Deserializer" library="ConfluentKafkaLibrary">
<var>${string_deserializer}</var>
<msg timestamp="20211108 10:39:09.527" level="INFO">${string_deserializer} = &lt;confluent_kafka.serialization.StringDeserializer object at 0x7ff53c0c7850&gt;</msg>
<status status="PASS" starttime="20211108 10:39:09.527" endtime="20211108 10:39:09.527"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<arg>key_serializer=${string_serializer}</arg>
<arg>value_serializer=${avro_serializer}</arg>
<arg>legacy=${False}</arg>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<msg timestamp="20211108 10:39:09.528" level="INFO">${producer_id} = d929cb55-a38f-4c90-a112-adf80d62c733</msg>
<status status="PASS" starttime="20211108 10:39:09.527" endtime="20211108 10:39:09.528"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${value}</var>
<arg>name=Robot</arg>
<arg>number=${10}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211108 10:39:09.529" level="INFO">${value} = {'name': 'Robot', 'number': 10}</msg>
<status status="PASS" starttime="20211108 10:39:09.528" endtime="20211108 10:39:09.529"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing3</arg>
<arg>partition=${0}</arg>
<arg>value=${value}</arg>
<arg>key=568a68fd-2785-44cc-8997-1295c3755d28</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:39:09.529" endtime="20211108 10:39:09.547"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:09.648" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:09.547" endtime="20211108 10:39:09.649"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:09.649" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:09.649" endtime="20211108 10:39:09.649"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:09.649" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:09.650" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:09.649" endtime="20211108 10:39:09.650"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:09.547" endtime="20211108 10:39:09.650"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:10.253" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:10.152" endtime="20211108 10:39:10.253"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:10.253" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:10.253" endtime="20211108 10:39:10.253"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:10.254" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:10.254" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:10.253" endtime="20211108 10:39:10.254"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:10.151" endtime="20211108 10:39:10.255"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:10.857" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:10.756" endtime="20211108 10:39:10.857"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:10.857" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:10.857" endtime="20211108 10:39:10.858"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:10.858" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:10.858" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:10.858" endtime="20211108 10:39:10.858"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:10.755" endtime="20211108 10:39:10.859"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:11.461" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20211108 10:39:11.360" endtime="20211108 10:39:11.461"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:11.462" level="INFO">Reaming messages to be delivered: 1</msg>
<status status="PASS" starttime="20211108 10:39:11.461" endtime="20211108 10:39:11.462"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:11.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20211108 10:39:11.462" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20211108 10:39:11.462" endtime="20211108 10:39:11.462"/>
</kw>
<status status="FAIL" starttime="20211108 10:39:11.359" endtime="20211108 10:39:11.463"/>
</kw>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:11.965" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:39:11.964" endtime="20211108 10:39:11.965"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:11.965" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:39:11.965" endtime="20211108 10:39:11.965"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:11.965" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:39:11.965" endtime="20211108 10:39:11.965"/>
</kw>
<status status="PASS" starttime="20211108 10:39:11.963" endtime="20211108 10:39:11.965"/>
</kw>
<status status="PASS" starttime="20211108 10:39:09.547" endtime="20211108 10:39:11.966"/>
</kw>
<kw name="Create Consumer" library="ConfluentKafkaLibrary">
<var>${consumer_group_id}</var>
<arg>auto_offset_reset=latest</arg>
<arg>key_deserializer=${string_deserializer}</arg>
<arg>value_deserializer=${avro_deserializer}</arg>
<arg>legacy=${False}</arg>
<doc>Create Kafka Consumer and returns its `group_id` as string.</doc>
<msg timestamp="20211108 10:39:11.967" level="INFO">${consumer_group_id} = 3348449c-6850-49e7-942c-5fba5b5776f2</msg>
<status status="PASS" starttime="20211108 10:39:11.966" endtime="20211108 10:39:11.967"/>
</kw>
<kw name="Subscribe Topic" library="ConfluentKafkaLibrary">
<arg>group_id=${consumer_group_id}</arg>
<arg>topics=avro_testing3</arg>
<doc>Subscribe to a list of topics, or a topic regex pattern.
   https://docs.confluent.io/current/clients/confluent-kafka-python/#confluent_kafka.Consumer.subscribe</doc>
<status status="PASS" starttime="20211108 10:39:11.967" endtime="20211108 10:39:11.967"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<arg>group_id=${consumer_group_id}</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<status status="PASS" starttime="20211108 10:39:11.967" endtime="20211108 10:39:21.970"/>
</kw>
<kw name="Produce" library="ConfluentKafkaLibrary">
<arg>group_id=${producer_id}</arg>
<arg>topic=avro_testing3</arg>
<arg>value=${value}</arg>
<arg>partition=${0}</arg>
<arg>key=568a68fd-2785-44cc-8997-1295c3755d28</arg>
<doc>Produce message to topic asynchronously to Kafka by encoding with specified or default avro schema.</doc>
<status status="PASS" starttime="20211108 10:39:21.970" endtime="20211108 10:39:21.972"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>10x</arg>
<arg>0.5s</arg>
<arg>All Messages Are Delivered</arg>
<arg>${producer_id}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="All Messages Are Delivered">
<arg>${producer_id}</arg>
<kw name="Flush" library="ConfluentKafkaLibrary">
<var>${count}</var>
<arg>${producer_id}</arg>
<doc>Wait for all messages in the Producer queue to be delivered. Returns the number of messages still in queue.
This is a convenience method that calls poll() until len() is zero or the optional timeout elapses.
- `timeout` (real) : Optional timeout. Default: `0.1`.</doc>
<msg timestamp="20211108 10:39:21.979" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20211108 10:39:21.973" endtime="20211108 10:39:21.979"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Reaming messages to be delivered: ${count}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211108 10:39:21.980" level="INFO">Reaming messages to be delivered: 0</msg>
<status status="PASS" starttime="20211108 10:39:21.979" endtime="20211108 10:39:21.980"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211108 10:39:21.980" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211108 10:39:21.980" endtime="20211108 10:39:21.980"/>
</kw>
<status status="PASS" starttime="20211108 10:39:21.972" endtime="20211108 10:39:21.980"/>
</kw>
<status status="PASS" starttime="20211108 10:39:21.972" endtime="20211108 10:39:21.980"/>
</kw>
<kw name="Poll" library="ConfluentKafkaLibrary">
<var>${messages}</var>
<arg>group_id=${consumer_group_id}</arg>
<doc>Fetch and return messages from assigned topics / partitions as list.
- ``timeout`` (int): Seconds spent waiting in poll if data is not available in the buffer.</doc>
<msg timestamp="20211108 10:39:21.981" level="INFO">${messages} = [{'name': 'Robot', 'number': 10}]</msg>
<status status="PASS" starttime="20211108 10:39:21.980" endtime="20211108 10:39:21.981"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${messages}</arg>
<arg>${TEST_DATA}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20211108 10:39:21.981" endtime="20211108 10:39:21.981"/>
</kw>
<kw name="Basic Teardown" type="TEARDOWN">
<arg>${consumer_group_id}</arg>
<kw name="Unsubscribe" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Unsubscribe of topics.</doc>
<status status="PASS" starttime="20211108 10:39:21.982" endtime="20211108 10:39:21.982"/>
</kw>
<kw name="Close Consumer" library="ConfluentKafkaLibrary">
<arg>${group_id}</arg>
<doc>Close down and terminate the Kafka Consumer.</doc>
<status status="PASS" starttime="20211108 10:39:21.982" endtime="20211108 10:39:21.986"/>
</kw>
<status status="PASS" starttime="20211108 10:39:21.982" endtime="20211108 10:39:21.986"/>
</kw>
<status status="PASS" starttime="20211108 10:39:09.524" endtime="20211108 10:39:21.986"/>
</test>
<status status="PASS" starttime="20211108 10:38:50.744" endtime="20211108 10:39:21.987"/>
</suite>
<suite id="s1-s4" name="Test Oauth" source="/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples/test_oauth.robot">
<test id="s1-s4-t1" name="Example Oauth">
<kw name="Skip" library="BuiltIn">
<doc>Skips the rest of the current test.</doc>
<msg timestamp="20211108 10:39:21.992" level="SKIP">Skipped with Skip keyword.</msg>
<status status="SKIP" starttime="20211108 10:39:21.992" endtime="20211108 10:39:21.992"/>
</kw>
<kw name="Get String Serializer" library="ConfluentKafkaLibrary">
<var>${string_serializer}</var>
<status status="NOT RUN" starttime="20211108 10:39:21.992" endtime="20211108 10:39:21.992"/>
</kw>
<kw name="Get String Serializer" library="ConfluentKafkaLibrary">
<var>${value_serializer}</var>
<status status="NOT RUN" starttime="20211108 10:39:21.992" endtime="20211108 10:39:21.992"/>
</kw>
<kw name="oauth_example.get_token">
<var>${fun}=</var>
<arg>configuration</arg>
<status status="NOT RUN" starttime="20211108 10:39:21.995" endtime="20211108 10:39:21.995"/>
</kw>
<kw name="Create Producer" library="ConfluentKafkaLibrary">
<var>${producer_id}</var>
<arg>key_serializer=${string_serializer}</arg>
<arg>value_serializer=${value_serializer}</arg>
<arg>legacy=${False}</arg>
<arg>security.protocol=sasl_plaintext</arg>
<arg>sasl.mechanisms=OAUTHBEARER</arg>
<arg>oauth_cb=${fun}</arg>
<doc>Create Kafka Producer and returns its `group_id` as string.
If `schema_registry_url` is used, Kafka Producer client which does avro schema
encoding to messages is created instead.</doc>
<status status="NOT RUN" starttime="20211108 10:39:21.995" endtime="20211108 10:39:21.995"/>
</kw>
<doc>Example of how to use OAUTH with library and call functools
via get_token function. For better handling there could be
some global variable which can be set inside of python lib.
Not executable right now, needs update env (issue #21).</doc>
<status status="SKIP" starttime="20211108 10:39:21.991" endtime="20211108 10:39:21.995">Skipped with Skip keyword.</status>
</test>
<status status="SKIP" starttime="20211108 10:39:21.987" endtime="20211108 10:39:21.996"/>
</suite>
<status status="PASS" starttime="20211108 10:38:05.098" endtime="20211108 10:39:21.997"/>
</suite>
<statistics>
<total>
<stat pass="17" fail="0" skip="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="17" fail="0" skip="1" id="s1" name="Examples">Examples</stat>
<stat pass="10" fail="0" skip="0" id="s1-s1" name="Test">Examples.Test</stat>
<stat pass="4" fail="0" skip="0" id="s1-s2" name="Test Adminclient">Examples.Test Adminclient</stat>
<stat pass="3" fail="0" skip="0" id="s1-s3" name="Test Avro">Examples.Test Avro</stat>
<stat pass="0" fail="0" skip="1" id="s1-s4" name="Test Oauth">Examples.Test Oauth</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20211108 10:39:07.140" level="WARN">Fast avro failed for schema with id 1, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:07.145" level="WARN">Fast avro failed for schema with id 2, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:09.510" level="WARN">Fast avro failed for schema with id 1, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:09.515" level="WARN">Fast avro failed for schema with id 2, falling thru to standard avro</msg>
<msg timestamp="20211108 10:39:21.990" level="ERROR">Error in file '/home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary/examples/test_oauth.robot' on line 3: Importing library 'oauth_example' failed: ModuleNotFoundError: No module named 'oauth_example'
Traceback (most recent call last):
  None
PYTHONPATH:
  /home/runner/work/robotframework-ConfluentKafkaLibrary/robotframework-ConfluentKafkaLibrary
  /usr/lib/python38.zip
  /usr/lib/python3.8
  /usr/lib/python3.8/lib-dynload
  /home/runner/.local/lib/python3.8/site-packages
  /usr/local/lib/python3.8/dist-packages
  /usr/lib/python3/dist-packages</msg>
</errors>
</robot>
